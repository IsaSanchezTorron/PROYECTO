{"remainingRequest":"/home/hab07/Desktop/Repo-Proyecto/PROYECTO/Frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/hab07/Desktop/Repo-Proyecto/PROYECTO/Frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/hab07/Desktop/Repo-Proyecto/PROYECTO/Frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/hab07/Desktop/Repo-Proyecto/PROYECTO/Frontend/src/views/Landing.vue?vue&type=template&id=a8baa566&scoped=true&","dependencies":[{"path":"/home/hab07/Desktop/Repo-Proyecto/PROYECTO/Frontend/src/views/Landing.vue","mtime":1593426417777},{"path":"/home/hab07/Desktop/Repo-Proyecto/PROYECTO/Frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hab07/Desktop/Repo-Proyecto/PROYECTO/Frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/hab07/Desktop/Repo-Proyecto/PROYECTO/Frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hab07/Desktop/Repo-Proyecto/PROYECTO/Frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}