{"remainingRequest":"/home/hab07/Desktop/Repo-Proyecto/PROYECTO/Frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/hab07/Desktop/Repo-Proyecto/PROYECTO/Frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/hab07/Desktop/Repo-Proyecto/PROYECTO/Frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/hab07/Desktop/Repo-Proyecto/PROYECTO/Frontend/src/views/Admin.vue?vue&type=template&id=54c38a05&scoped=true&","dependencies":[{"path":"/home/hab07/Desktop/Repo-Proyecto/PROYECTO/Frontend/src/views/Admin.vue","mtime":1593438445834},{"path":"/home/hab07/Desktop/Repo-Proyecto/PROYECTO/Frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hab07/Desktop/Repo-Proyecto/PROYECTO/Frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/hab07/Desktop/Repo-Proyecto/PROYECTO/Frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/hab07/Desktop/Repo-Proyecto/PROYECTO/Frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}